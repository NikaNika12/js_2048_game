{"version":3,"sources":["scripts/main.js"],"names":["scoreGame","document","querySelector","startButton","startMessage","winMessage","loseMessage","gameBoard","collums","rows","board","score","slideScore","emptyTileNumber","r","c","addTileNumber","rowIndex","cellIndex","Math","floor","random","updateTile","tile","num","innerText","classList","value","add","innerHTML","remove","replace","removeEventListener","keyEventHandler","updateBoard","cells","gameLost","slide","row","noZerosRow","filter","cell","oneToTwoRow","oneToTwoValue","i","length","push","slideLeft","slideRight","reverse","slideUp","slideDown","e","key","addEventListener","forEach","fill","target"],"mappings":"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","file":"main.5175d079.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst scoreGame = document.querySelector('.game-score');\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst gameBoard = document.querySelector('.game-field');\n\nconst collums = 4;\nconst rows = 4;\n\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nlet score = 0;\nlet slideScore = 0;\n\nfunction emptyTileNumber() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < collums; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addTileNumber() {\n  if (emptyTileNumber()) {\n    let rowIndex;\n    let cellIndex;\n\n    do {\n      rowIndex = Math.floor(Math.random() * rows);\n      cellIndex = Math.floor(Math.random() * collums);\n    } while (board[rowIndex][cellIndex] !== 0);\n\n    board[rowIndex][cellIndex] = Math.floor(Math.random() < 0.9 ? 2 : 4);\n  } else {\n    return null;\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.classList.add(`field-cell--${num}`);\n    tile.innerHTML = num;\n    slideScore += num;\n  }\n\n  if (num === 2048) {\n    winMessage.classList.remove('hidden');\n    startButton.classList.replace('restart', 'start');\n    startButton.innerText = 'Start';\n    document.removeEventListener('keyup', keyEventHandler);\n  }\n}\n\nfunction updateBoard() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < collums; c++) {\n      const tile = gameBoard.rows[r].cells[c];\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n\n  scoreGame.innerHTML = score;\n\n  if (gameLost()) {\n    loseMessage.classList.remove('hidden');\n    document.removeEventListener('keyup', keyEventHandler);\n  }\n}\n\nfunction gameLost() {\n  if (emptyTileNumber()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < collums - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let c = 0; c < collums; c++) {\n    for (let r = 0; r < rows - 1; r++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction slide(row) {\n  const noZerosRow = row.filter(cell => cell !== 0);\n  const oneToTwoRow = [];\n  let oneToTwoValue = 0;\n\n  for (let i = 0; i < noZerosRow.length; i++) {\n    if (noZerosRow[i] === noZerosRow[i + 1]) {\n      oneToTwoRow.push(noZerosRow[i] * 2);\n      oneToTwoValue += noZerosRow[i] * 2;\n      noZerosRow[i + 1] = 0;\n    } else {\n      oneToTwoRow.push(noZerosRow[i]);\n    }\n  }\n\n  while (oneToTwoRow.length < collums) {\n    oneToTwoRow.push(0);\n  }\n\n  score += oneToTwoValue;\n\n  return oneToTwoRow;\n}\n\nfunction slideLeft() {\n  slideScore = 0;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n  }\n\n  addTileNumber();\n  score += slideScore;\n  scoreGame.innerHTML = score;\n  updateBoard();\n}\n\nfunction slideRight() {\n  slideScore = 0;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row.reverse());\n    board[r] = row.reverse();\n  }\n\n  addTileNumber();\n  score += slideScore;\n  scoreGame.innerHTML = score;\n  updateBoard();\n}\n\nfunction slideUp() {\n  slideScore = 0;\n\n  for (let c = 0; c < collums; c++) {\n    let row = [];\n\n    for (let r = 0; r < rows; r++) {\n      row.push(board[r][c]);\n    }\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n    }\n  }\n\n  addTileNumber();\n  score += slideScore;\n  scoreGame.innerHTML = score;\n  updateBoard();\n}\n\nfunction slideDown() {\n  slideScore = 0;\n\n  for (let c = 0; c < collums; c++) {\n    let row = [];\n\n    for (let r = 0; r < rows; r++) {\n      row.push(board[r][c]);\n    }\n\n    row = slide(row.reverse());\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n    }\n  }\n\n  addTileNumber();\n  score += slideScore;\n  scoreGame.innerHTML = score;\n  updateBoard();\n}\n\nstartButton.addEventListener('click', (e) => {\n  board.forEach(row => row.fill(0));\n  score = 0;\n\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  e.target.classList.replace('start', 'restart');\n  e.target.innerHTML = 'Restart';\n\n  document.addEventListener('keyup', keyEventHandler);\n\n  addTileNumber();\n  addTileNumber();\n\n  updateBoard();\n});\n\nfunction keyEventHandler(e) {\n  switch (e.key) {\n    case 'ArrowDown':\n      slideDown();\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      break;\n\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      break;\n  }\n}\n"]}